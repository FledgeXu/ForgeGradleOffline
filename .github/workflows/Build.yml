  
name: Build

on: 
  push:
    branches:
      - 1.12
jobs:
  windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Add private Key
      run: |
          mkdir ~\.ssh
          mv config ~\.ssh\config
          echo '${{secrets.UPLOAD}}' > ~\.ssh\id_rsa
    - name: Build with Gradle
      run: |
          $version = Get-Content "version.txt"
          $version = "https://files.minecraftforge.net/maven/net/minecraftforge/forge/"+$version+"/forge-"+$version+"-mdk.zip"
          echo $version
          mkdir build
          cd build
          curl $version -o mdk.zip
          Expand-Archive .\mdk.zip .
          rm mdk.zip
          echo "org.gradle.jvmargs=-Xmx5G" > gradle.properties
          echo "org.gradle.daemon=false" >> gradle.properties
    - name: setupDecompWorkspace
      run: |
          cd build
          .\gradlew.bat setupDecompWorkspace
    - name: genEclipsejRuns
      run: |
          cd build
          .\gradlew.bat eclipse
    - name: genIntellijRuns
      run: |
          cd build
          .\gradlew.bat genIntellijRuns
    - name: after gradlew
      run: |
          $version = Get-Content "version.txt"
          cd build
          cp ~\.gradle gradlehome -Recurse -Force
          cd ..
          Compress-Archive .\build "windows_$version.zip"
          echo "put windows_${version}.zip" >> sftp
    - name: upload
      shell: bash
      run: |
        version=$(cat version.txt)
        t=$(date "+%Y-%m-%d-%H-%M-%S")
        curl.exe -F "file=@windows_${version}.zip" "https://${{secrets.IP}}/api/v0/add?&pin=false" > download.json
        cat download.json
        echo "::set-output name=version::${version}-${t}"
        echo "::set-output name=v::${version}"
      id: upload
    - name: Check error
      shell: python
      id: check
      run: |
        import json
        with open("download.json") as f:
            temp = json.loads(f.read())
            if 'Type' in temp and temp['Type']=="error":
                print(temp['Message'])
                exit(1)
            else:
                print("::set-output name=py::{}".format(temp['Hash']))
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        body: |
            Hash ${{ steps.check.outputs.py }}
            [IPFS 网络下载](https://contributionls.github.io/public-gateway-checker/?cid=${{ steps.check.outputs.py }}),请从中选择一个绿色地址下载。
        tag_name: ${{ steps.upload.outputs.version }}-windows
        release_name: ${{ steps.upload.outputs.version }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./windows_${{ steps.upload.outputs.v }}.zip
        asset_name: windows_${{ steps.upload.outputs.v }}.zip
        asset_content_type: application/zip
    - name: load Cache
      shell: bash
      run: |
          curl https://cloudflare-ipfs.com/ipfs/${{ steps.check.outputs.py }} -o tmp.zip
          curl https://ipfs.io/ipfs/${{ steps.check.outputs.py }} -o tmp.zip
